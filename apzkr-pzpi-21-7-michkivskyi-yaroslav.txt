РЕФЕРАТ

Пояснювальна записка до курсової роботи: 26 с., 12 рис., 1 табл., 1 додаток, 11 джерел.
ВІДСТЕЖЕННЯ, ТЕМПЕРАТУРА, GPS, ПЕРЕВЕЗЕННЯ, ЛОГІСТИКА, СИСТЕМА КОНТРОЛЮ.
Об'єктом дослідження є індустрія перевезень товарів, що потребують дотримання низьких температур зберігання, а саме актуальне питання контролю температурних режимів та відстеження місцезнаходження вантажу під час транспортування.
Метою курсової роботи є розробка системи, яка забезпечує моніторинг температури й місцезнаходження товарів під час їх перевезення за допомогою датчиків та спеціалізованого програмного забезпечення. Система дозволяє компаніям відстежувати поточну температуру й місцезнаходження транспорту в реальному часі, фіксувати відхилення від норм зберігання, розраховувати тривалість неналежних температурних умов, а також керувати перевезеннями, додаючи та редагуючи інформацію про транспорт, водіїв, вантажі й клієнтів.
Розробка базується на Node.js, Express.js, MongoDB, .NetFramework для IoT-пристрою, React для веб-клієнта. У результаті реалізовано програмну систему контролю перевезень з веб-додатком, серверною частиною та IoT-пристроєм.

ВСТУП

Курсова робота присвячена розробці комплексної програмної системи для контролю перевезень товарів, що потребують дотримання низької температури зберігання, таких як заморожені продукти чи медичні препарати. Порушення температурного режиму під час транспортування може призвести до пошкодження або псування вантажу, що спричинить значні фінансові втрати та ризики для здоров'я споживачів.
Актуальність роботи полягає у зростаючій потребі забезпечення належних умов зберігання та перевезення товарів, що вимагають контролю температури. Впровадження інноваційних рішень для моніторингу температури та місцезнаходження вантажів під час транспортування допоможе підвищити якість логістичних послуг, зменшити ризики та гарантувати відповідність нормативним вимогам.
Метою є створення системи, яка дозволить компаніям-перевізникам відстежувати температуру й місцезнаходження транспорту в реальному часі за допомогою датчиків, фіксувати порушення норм зберігання, а також керувати процесом перевезень, додаючи інформацію про транспорт, водіїв, вантажі й клієнтів. Система має забезпечити зручний інтерфейс для перевізників та можливість перегляду поточного стану перевезення.

1 ОБ’ЄКТ РОЗРОБКИ

1.1 Опис розділу
Розділ складається з опису об’єкту розробки та засобів програмної реалізації системи. Об'єкт розробки описується за допомогою Vision and Scope документу, який є важливим інструментом у процесі планування та розробки програмного забезпечення. Використання Vision and Scope допомагає визначити мету проекту, ключові вимоги та обмеження, а також встановити рамки та масштаб розробки. Це дозволяє забезпечити чітке розуміння цілей проекту як серед розробників, так і серед зацікавлених сторін, що, в свою чергу, сприяє ефективній координації роботи і успішному виконанню завдань.
1 BUSINESS REQUIREMENTS
1.1 Background
Останнім часом багато компаній, що займаються перевезенням товарів, зокрема продуктів харчування та медичних препаратів, стикаються з проблемою зберігання товарів, які потребують низької температури, таких як заморожені продукти або вакцини. Недостатня контрольована температура під час транспортування може призвести до пошкодження або зіпсування товарів, що в свою чергу може призвести до фінансових втрат для компаній і загрози здоров'ю для споживачів. Рішенням цієї проблеми може бути програмна система контролю перевезення товарів, що потребують низької температури зберігання.
Ця програмна система спрямована на стеження за температурою під час перевезення товарів і забезпечення відповідних умов зберігання. Вона дозволяє компаніям в реальному часі відстежувати місцезнаходження транспорту та температуру товарів під час транспортування за допомогою датчиків та спеціалізованого програмного забезпечення. У разі відхилення температури зберігання від норми, програмне забезпечення це зафіксує.
Використання цієї системи дозволяє компаніям забезпечити якість та безпеку перевезення товарів, що потребують низької температури та забезпечити відповідність стандартам та регулятивним вимогам.
1.2 Business Opportunity
На ринку існує декілька компаній, які надають рішення для контролю температури під час перевезення товарів, що потребують низької температури зберігання, але усі вони спеціалізуються на виробництві повноцінних холодильників з системою що дозволяє здійснювати контроль за температурою у реальному часі, та у той же час не мають логістичного функціоналу. Розглянемо основних потенційних конкурентів:
	Thermo King є провідним виробником мобільних холодильних систем та контейнерів для транспортування харчових продуктів та медичних препаратів. Їхні системи відомі своєю надійністю та довговічністю, а також вони мають широкий асортимент продуктів для різних потреб. Однак, вони можуть бути дорогими у встановленні та обслуговуванні, що може бути недоцільним для менших підприємств.
	Carrier Transicold також є відомим постачальником мобільних холодильних систем та контейнерів для транспортування харчових продуктів. Вони відомі своєю ефективністю та інноваціями в галузі температурного контролю. Проте, їхні продукти також можуть бути високими у вартості, що може бути обтяжливим для менших підприємств.
	Dometic - це ще один виробник холодильних систем, який вирізняється своїми компактними та ефективними рішеннями для транспортування. Вони спеціалізуються на мобільних холодильних системах для автомобілів, кемперів та суден. Однак, їхні продукти можуть бути менш потужними та не такими розгалуженими, як у конкурентів.
Враховуючи ці фактори, можна зробити висновок про те, що наша програмна система має можливість вийти на ринок і конкурувати за рахунок спрощеної інтеграції, використання системи датчиків температури, що можна пристосувати до будь-якого обладнання, замість повноцінного нового обладнання зі своїм ПЗ, комбінації з логістичною частиною системи для організації самих перевезень, доступності та конкурентоспроможних цін.
1.3 Business Objectives and Success Criteria
BO-1: Успішне впровадження системи: Головною метою є впровадження програмної системи контролю температури у рефрижераторах під час перевезень та забезпечення гарантій належного транспортування товару.
BO-2: Забезпечення компанії-перевізника інформацією про поточне місцезнаходження товару.
SC-1. Зниження ризику отримати скарги від клієнтів, за рахунок можливості підтвердити якість.
SC-2. Збільшення кількості клієнтів за рахунок підвищення якості обслуговування.
1.4 Customer or Market Needs
Клієнти мають потребу у перевезенні своїх товарів з гарантією що норми їх зберігання не будуть порушені. Перевізники мають потребу у зручному логістичному сервісі що надасть можливість роботи з перевезеннями, буде оновлювати поточну інформацію з датчиків температури та геолокацію транспорту. При цьому система повинна бути з легкою інтеграцією та дешевою.
1.5 Business Risks
Ri-1: Конкуренція з боку інших компаній, що пропонують повноцінні, хоч і не дешеві, холодильні системи з контролем температури.
Ri-2: Технічні проблеми впровадження модулів контролю температури та їх інтеграції з холодильним обладнанням.
Ri-3:     Дотримання правил конфіденційності даних і загроз кібербезпеці.
2 VISION OF THE SOLUTION
2.1 Vision Statement
Створення комплексної системи що об`єднає підсистему контролю температури товарів при перевезеннях, зробить її більш дешевою за допомогою використання окремих датчиків замість спеціалізованого обладнання, більш легкою у інтеграції та широкодоступною та підсистему логістики перевезень, з можливістю поточного контролю місцезнаходження транспорту.
2.2 Major Features
MF-1 Моніторинг температури датчиків на товарах у поточному часі.
MF-2 Зберігання даних датчиків для підтвердження якості умов перевезення.
MF-3 Моніторинг поточного місцезнаходження транспорту.
MF-4 Можливість управління перевезеннями.
MF-5 Надійні заходи безпеки та конфіденційності даних.
MF-6 Зручні інтерфейси для роботи перевізників та для перегляду поточної інформації у клієнтів.
2.3 Assumptions and Dependencies
AD-1 Наявність надійних датчиків температури, GPS та спеціального модуля-об’єднувача.
AD-2 Дотримання правил конфіденційності даних.
AD-3 Наявність достатніх технічних знань у перевізників.
3 SCOPE AND LIMITATIONS
3.1 Scope of Initial Release
Серверна частина повинна включати:
	реєстрацію та авторизацію користувачів;
	реалізацію захисту даних від перегляду та зміни;
	надання можливості роботи с перевезеннями: додавання, видалення, редагування транспорту, водіїв у компанії;
	надання можливості контролю та фіксації температурних показників, та контролю поточного місцезнаходження транспорту перевезення;
	надання можливості розрахувати кількість часу що товар пробув у неналежній температурі та середню температуру за цей час;
	надання можливості перегляду даних товарів;
	обробку помилок при використанні.
Клієнтська частина повинна включати:
	інтерфейс для реєстрації та авторизації користувачів;
	інтерфейс для можливості роботи с перевезеннями: додавання, видалення, редагування транспорту, водіїв у компанії, упаковок, клієнтів;
IoT частина повинна включати:
	програмне забезпечення для спеціального модулю що буде оброблювати дані зі стандартних датчиків температури, GPS та відправляти їх на сервер.
3.2 Scope of Subsequent Releases
Наступні релізи можуть розширювати функції системи, потенційно включаючи:
	розрахунки фінансів що будуть отримані за перевезення та штрафів за порушення норм зберігання;
	інтеграція з розумними холодильними системами конкурентів;
розширена статистика та аналітика перевезень.
3.3 Limitations and Exclusions
LI-1 Система не включатиме розширені функції автоматизації, такі як інтелектуальне розвантаження.
LI-2 Сумісність з конкретним видом холодильних систем та датчиків.
LI-3 Система не надає конкретних гарантій підвищення якості перевезень, я є допоміжною.
4 BUSINESS CONTEXT
4.3 Operating Environment
Система буде працювати на будь-яких пристроях у веб застосунку.
Сервер буде написано на Express JS 4.19 за допомогою JavaScript. Будуть використовуватись бібліотеки BcrtptJS для хешування паролів та JsonWebToken для створення JWT токенів авторизації.
Буде використана об'єктноорієнтована база даних Mongo DB та хмарні сервіси MongoDB Atlas. Зв’язок сервера з базою даних буде забезпечено за допомогою ODM Mongoose.
Клієнтська частина буде працювати у браузері, буде написана за допомогою TypeScript, HTML та CSS. Будуть використані бібліотеки ReactTS 18.2, React-dom для використання DOM, React-router-dom маршрутизації, Axios http запитів, React-toastify для спливаючих повідомлень, React-Google-Maps/api для відображення карти та місцезнаходження рефрижераторів, JWT-decode для розшифровки токенів авторизації.
IoT частина буде використовуватися вбудована система на Windows 10 IoT Enterprise з консольним інтерфейсом. Програма для терміналу буде розроблено за допомогою мови програмування С#.
Система буде працювати цілодобово, більшою частиною навантаження на сервери буде взаємодія IoT та серверу, бо датчиків доволі багато, тож навантаження буде розподілене протягом робочого дня (7:00 – 22:00) коли виконуються перевезення.

2 РОЗРОБКА ПРОГРАМНОЇ СИСТЕМИ

2.1 Опис структури бази даних.
Проєктування бази даних було проведено за допомогою створення ER-моделі даних (рис 2.1.1). Діаграма складається з 9 сутностей: готель, кімната, клієнт готелю, тип приладу, прилад, сесія клієнта, показники загального лічильника, сесія приладу, показники лічильника приладу.
База даних має такі зв’язки  між сутностями:
1.	водій – перевезення(один до багатьох, у водія може бути багато перевезень, або жодного, перевезення виконується одним водієм);
2.	рефрижератор – перевезення(один до багатьох, рефрижератор може бути використаний у багатьох або жодному з перевезень, перевезення здійснює рівно один рефрижератор);
3.	клієнт – перевезення(один до багатьох, клієнт може мати багато або жодного перевезення, перевезення має рівно одного замовника)
4.	перевезення – упаковка у перевезенні(один до багатьох, упаковок у перевезенні може бути багато, але всі вони належать рівно одному перевезенню);
5.	упаковка – упаковка у перевезенні(один до багатьох, упаковки у перевезенні – сутності що посилаються рівно на одну упаковку, але їх може бути багато або жодної для конкретної упаковки);
6.	упаковка у перевезенні – показники датчиків температури(один до багатьох, для упаковки у перевезенні може зберігатися багато або жодного показника датчиків температури, та усі показники відносяться до рівно одної упаковки у перевезенні);
Програмна система як базу даних буде використовувати MongoDB. Забезпечувати роботу з базою даних буде ODM Mongoose.
2.2 Опис загальної архітектури системи
Система в цілому представляє класичну клієнт-серверну архітектуру. Сервери є незалежними один від одного. Клієнти також функціонують паралельно і незалежно один від одного. Немає жорсткої прив'язки клієнтів до серверів. У програми є 3 різних сервери:
1.	сервер бази даних приймає дані від основного серверу та зберігає їх локально;
2.	основний сервер системи, приймає запити REST API, оброблює дані та реалізує бізнес логіку, використовує ODM для зв’язку з сервером бази даних;
3.	сервер веб додатку, виконує запити на основний сервер, оброблює отримані дані та на їх основі формує сторінки для відправлення їх у браузер користувача.
Отже, можна сказати, що система представляє трирівневу архітектурну модель, де кожен компонент не залежить від інших, в результаті та може бути легко масштабований.
Було розроблено діаграму системи у вигляді UML діаграми розгортання. Ця діаграма допомагає відслідкувати взаємодію в системі фізичних компонентів (вузли) та які програмні компоненти (артефакти) необхідно запускати на кожному з вузлів.
Система складається з 5 вузлів: сервер системи, сервер веб-додатку, браузер адміністратора, IoT пристрій, сервер бази даних. На сервері системи відбувається бізнес логіка та взаємодія з базою даних (за допомогою протоколу TCP/IP та ODM Mongoose). На сервері веб-додатку знаходиться створення макету веб-сторінки. У браузері адміністратора відкривається створена веб-сторінка, зберігається дані акаунту та надсилаються HTTP запити на сервер. IoT Device представляє модуль що збирає та обробляє інформацію з датчиків температури та GPS, та періодично надсилає їх на сервер. Датчики температури та GPS підключаються до IoT модулю дротами. Сервер бази даних зберігає дані.
2.2 Розробка серверу системи
2.2.1 Опис архітектури серверної частини
Архітектура серверної частини програмної системи базується на звичайному проекті на ExpressJS, тобто має трирівневу структуру: маршрути, контролери/сервіси та Mongoose ODM. Система складається з п’яти основних компонентів:
1.	маршрути (routers): використовуються для направлення отриманих на сервер запитів до відповідних контролерів. Також вони використовують проміжне програмне забезпечення, необхідне для подальшої обробки запиту у контролері;
2.	проміжне програмне забезпечення (middlewares): застосовується для перевірки авторизації користувача та перевірки, чи має він доступ до відповідних функцій системи згідно своєї ролі. Також використовується для розшифровки імені користувача з JWT токену та передачі його далі до контролера;
3.	контролери (controllers): отримують дані запитів до серверу, взаємодіють з моделями для внесення змін у базу даних, а також використовують сервіси для реалізації бізнес-логіки, після чого відправляють відповідь на запит;
4.	моделі (models): відповідають за ініціалізацію бази даних та подальшу взаємодію з нею. За це відповідає ODM Mongoose та база даних MongoDB. Моделі доступні з будь-якої частини системи, що спрощує їх використання;
5. сервіси (services): використовується для проведення складніших розрахунків, або винесення з контролерів функціоналу, який повторюється. В системі наявні сервіс для створення статистики порушень температури перевезень та сервіс створення jwt токенів.
2.2.2 Побудова діаграм для серверу
Програмна система для контролю перевезень товарів що потребують низької температури зберігання.
Взаємодію користувачів з системою представлено на діаграмі прецедентів (рис 2.2.2). За діаграмою було визначено необхідну функціональність системи та взаємодію ролей з нею.
Для проектування внутрішньої взаємодії компонентів системи було розроблено діаграму компонентів (рис. 2.2.3). Система складається з таких компонентів: Моделі (Models), Контролери (Controller), Сервіси (Services), Проміжне ПЗ (Middlewares),  Маршрутизатори (Routers), Сервер API (APIServer), WebSocket. Зовнішніми компонентами є База даних (Database), Клієнт (Client) та IoT пристрій (IoT Device).
2.2.3 Взаємодія з іншими компонентами
Програмна система використовує REST для взаємодії клієнтів із сервером. API включає 32 кінцевих точок, розподілених по 7 маршрутах (Додаток А). Кінцеві точки відповідають за передачу даних між сервером і клієнтом, направляючи вхідні дані до відповідних функцій на сервері. На серверній стороні для цього використовується стандартна маршрутизація в ExpressJS із створенням маршрутів (Route) та обробкою відповідних запитів.
Запити з маршрутів передаються до контролерів, де відбувається обробка вхідних даних. Деякі кінцеві точки не приймають жодних вхідних даних, наприклад, запит GET на “/drivers/all”, який повертає всіх водіїв. Інші кінцеві точки приймають параметри тіла запиту, як у випадку з POST-запитом на “/admin/login/”, який потребує двох рядків: “login” та “password”. Більшість кінцевих точок використовують jwt токен для перевірки прав доступу до системи.
2.3 Опис програми для IoT пристрою
2.3.1 Опис архітектури
Архітектура програми представляє собою 3-шарову архітектуру: представлення, обробка даних та доступ до даних.
1.	представлення. В системі представлена консоллю, у яку виводиться поточний стан системи та результат запитів на відправку даних на сервер;
2.	обробка даних. В системі представлено за допомогою сервісів обробки. GpsService займається обробкою даних GPS модуля, TemperatureDataService займається обробкою даних з датчиків;
3.	доступ до даних. В системі представлено за допомогою сервісу ApiService у якому знаходяться функції для відправки http запитів.
2.3.2 Побудова діаграм
Програма для IoT пристрою передбачає автоматичне функціонування, без втручання у систему під час роботи. Система автоматично збирає, оброблює та надсилає дані підключених датчиків на сервер де вони можуть бути переглянуті користувачами.
Взаємодію користувачів з системою представлено на діаграмі прецедентів (рис 2.3.1). За діаграмою було визначено необхідну функціональність програми та взаємодію ролей з нею.
Для розробки подальших функцій програми було розроблено UML діаграму діяльності (рис 2.3.2). Автоматичний цикл роботи програмного коду повторюється до вимкнення пристрою.
Взаємодія компонентів програми представлено на UML діаграмі взаємодії (рис 2.3.3).
Для проектування внутрішньої взаємодії компонентів системи було розроблено діаграму компонентів (рис. 5.1). Система складається з таких компонентів: Сервіс запитів (ApiService), головного виконавчого файлу (Controller), Сервіси обробки (GPSService, TemperatureDataService). Сервер (Server), модуль GPS (GPS Module), датчики температури (Temperature Indicators) та водій (Driver-man) що вмикає систему на початку перевезення є зовнішніми компонентами.
2.3.3 Взаємодія з іншими компонентами
Програма взаємодіє з іншими компонентами системи завдяки двом основним методам: HTTP запити та кабельне з’єднання. Кабельне з’єднання потрібно для зв’язку з датчиками  За допомогою HTTP запитів програма передає на сервер дані з датчиків. Запити виконуються системою за допомогою окремого сервісу ApiService.
2.4 Розробка веб-клієнту
2.4.1 Опис архітектури
Веб-додаток побудований на основі класичної React-архітектури, яка використовує компонентний підхід. Кожна сторінка є компонентом, перехід між сторінками виконується за допомогою react-router-dom. Також компоненти сторінок включають в себе інші компоненти, як наприклад Header з логотипом та ім’ям користувача.
У ході розробки було використано основні правила написання коду за допомогою бібліотеки React:
Використання інтерфейсів. Використовуйте TypeScript для створення інтерфейсів та типів, що забезпечують чітку структуру даних і підвищують безпеку коду.
Модульність та ізольованість. Кожен компонент повинен бути максимально ізольованим і незалежним. Компоненти повинні виконувати одну конкретну задачу і бути легко повторно використовуваними.
Легкість розуміння: Односпрямовані потоки даних зменшують складність взаємодії.
2.4.2 Побудова діаграм
Програмна система має єдину роль користувача - Адміністратор.
Взаємодію користувачів з веб-застосунком представлено на діаграмі прецедентів (рис 2.4.1). За діаграмою було визначено необхідну функціональність системи та взаємодію ролей з нею.
Для розробки подальших функцій програми було розроблено UML діаграму діяльності (рис 2.4.2).
За допомогою аналіз структури програмної системи було виділено пакети, з яких складається система. Ці пакети та зв’язки між ними можна  побачити на діаграмі пакетів (рис. 2.4.3).
Для розробки структури програми створено діаграму компонент(рис. 2.4.4). На ній відображено взаємодію основних компонентів веб програми: Сторінок (Page), Компонентів (Component), Інтерфейсів (Interfaces) та Запитів (HttpRequest). Також система взаємодіє з зовнішніми компонентами: сервером (Server) та користувачами (User).
2.4.3 Взаємодія з іншими компонентами
Веб-клієнт взаємодіє з сервером завдяки HTTP запитам. Для використання функцій серверу з обмеженим доступом, у заголовках запиту також передається JWT токен, що ідентифікує користувача. Отримати токен можна у будь-який момент просто виконавши авторизацію.

3 ЗАСТОСУВАННЯ ПРОГРАМНОЇ СИСТЕМИ

3.1	Встановлення серверу
Для запуску серверу необхідно відкрити директорію з програмним кодом та відкрити її у терміналі. Після цього необхідно запустити у терміналі команду npm run dev. Для коректної усіх роботи серверної частини необхідно мати встановлений Node.js на пристрої.
3.2	Встановлення IoT програми
Перед запуском IoT модулю необхідно підключити датчики температури та GPS. Для запуску IoT програми необхідно відкрити директорію з збудованою програмою та запустити файл з розширенням .exe. Після цього модуль автоматично почне працювати. Обмеження щодо пристрою: ОС  Windows 10 IoT Enterprise.
3.3	Встановлення серверу веб-клієнта
Для запуску серверу необхідно відкрити директорію з файлами додатку у терміналі та виконати команду npm run dev. Для роботи додатку необхідно мати встановлений Node.js. Обмежень для пристрою немає.

ВИСНОВКИ

На основі проведеного аналізу та вивчення потреб ринку було розроблено програмну систему для контролю перевезень товарів що потребують низької температури зберігання. Розробка ПЗ стала важливим кроком у забезпеченні якості та безпеки товарів під час транспортування.
В результаті аналізу ринку та потреб користувачів було виявлено недоліки існуючих систем для контролю перевезень товарів в умовах низької температури, а саме: висока вартість та низька адаптивність.
Було розроблено програмне забезпечення що відповідає потребам ринку. При цьому було використано сучасні технології та рішення, зокрема використання окремого IoT модуля та датчиків, що робить систему більш сумісною та дешевою.
Розроблена система контролю включає сервер, веб-клієнт та програмне забезпечення для IoT модулю, що збирає інформацію з датчиків, обробляє та надсилає на сервер.
Система дає змогу користувачу: реєструватися, авторизуватися, керувати  ресурсами логістичної компанії, збирати інформацію з датчиків та створювати статистику щодо порушень правил перевезень.
Система гарантує безпеку за рахунок шифрування даних та впровадження можливості доступу до функцій тільки за умови наявності підтвердження.
Система має зручний та інтуїтивно зрозумілий інтерфейс, що спрощує її інтеграцію та постійне оновлення даних що надходять, що підвищує зручність.
Система має багатошарову архітектуру, що полегшує її масштабування та збільшує гнучкість.
Система економічно більш вигідна ніж конкуренти за умови інтеграції у вже існуючу систему, та гарантує якість логістичних послуг.
Таким чином, розроблена система є комплексним рішенням для моніторингу температурних режимів та відстеження місцезнаходження вантажів під час перевезень.

ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ

1.	Веб сайт компанії Carrier Transicold. URL: https://www.carrier.com (дата звернення: 17.03.24).
2.	Веб сайт компанії Domestic. URL: https://www.domestic.com (дата звернення: 17.03.24).
3.	Веб сайт компанії Thermo King. URL: https://europe.thermoking.com/ (дата звернення: 17.03.24).
4.	Express - Node.js фреймворк. URL: https://expressjs.com/ (дата звернення: 27.03.2024).
5.	Mongoose документація. URL: https://mongoosejs.com/docs/ (дата звернення: 27.03.2024).
6.	Json Web Token введення. URL: https://jwt.io/introduction (дата звернення 29.03.2024).
7.	Басс, Л., Клементс, П., Казман, Р. Архітектура програмного забезпечення на практиці, третє видання. Бостон: Addison-Wesley, 2012. - 640 с.
8.	Використання HTTP у додатках С# документація. URL: https://learn.microsoft.com/en-us/dotnet/api/system.net.http?view=netframework-4.8 (дата звернення 22.04.2024).
9.	Гофмейстер, К., Кручтен, П., Норд, Р. Л., Оббінк, Г., Ран, А., Америка, П. Загальна модель проектування архітектури програмного забезпечення, виведена з п'яти промислових підходів // Журнал системного та програмного забезпечення. - 2007. - 80 (1): 106–126.
10.	React документація. URL: https://react.dev/learn (дата звернення 14.05.2024).
11.	Користування Google Maps Platform. URL: https://developers.google.com/maps/documentation?hl=en (дата звернення 28.05.2024).

ДОДАТОК А
Специфікація REST

Таблиця А.1 – Специфікація REST API
Посилання на кінцеву точку	Метод HTTP	Необхідна роль	Опис роботи
Маршрут Admin (“/admin/”)
/admin/register/	POST		Реєстрація адміністратора
/admin/login/	POST		Авторизація адміністратора
/admin/export/	GET	Admin	Експорт бази даних системи до json файлу
/admin/import/	GET	Admin	Імпорт бази даних системи з раніше експортованих даних
Маршрут Client (“/client/”)
/client/register/	POST	Admin	Додавання нового клієнта
/client/all/	GET	Admin	Отримання усіх клієнтів
/client/:id/	GET	Admin	Отримання інформації про конкретного клієнта
Маршрут Driver (“/staff/”)
/driver/add/	POST	Admin	Додати водія
/driver/:id/	GET	Admin	Отримати повну інформацію про водія
/driver/all/	GET	Admin	Отримати інформацію про усіх водіїв
/driver/:id/edit/	PATCH	Admin	Виправити інформацію про водія
/driver/:id/delete/	DELETE	Admin	Видалити водія
Маршрут Case (“/case/”)
/case/add/	POST	Admin	Додати упаковку
/case/:id/	GET	Admin	Повна інформація про упаковку
/case/:id/edit/	PATCH	Admin	Редагування інформації про упаковку
/case/:id/delete/	DELETE	Admin	Видалити упаковку
/case/all/	GET	Admin	Отримати інформацію про усі упаковки
Маршрут Fridge (“/fridge/”)
/fridge/add/	POST	Admin	Додати рефрижератор
/fridge/all/	GET	Admin	Отримати інформацію про усі рефрижератори
/fridge/:id/	GET	Admin	Отримати повну інформацію про рефрижератор
/fridge/:id/edit/	PATCH	Admin	Редагувати інформацію про рефрижератор
/fridge/:id/relocate/	PATCH	Admin	Змінити дані про місцеположення рефрижератора
/fridge/:id/nearest/	GET	Admin	Знайти найближчий незайнятий рефрижератор
/fridge/:id/delete/	DELETE	Admin	Видалити рефрижератор
Маршрут Trip (“/trip/”)
/trip/add/	POST	Admin	Додати перевезення
/trip/all/	GET	Admin	Отримати інформацію про усі перевезення
/trip/:id/	GET	Admin	Отримати повну інформацію про конкретне перевезення
/trip/:id/finish/	PATCH	Admin	Завершити конкретне перевезення
/trip/resources/	GET	Admin	Отримати доступні ресурси що готові до перевезення
Маршрут TripCase (“/tripcase/”)
/tripcase/add/	POST	Admin	Додати упаковку у перевезення
/tripcase/:id/	GET	Admin	Отримати повну інформацію про упаковку у перевезенні
/tripcase/ti/add	POST		Додати показники датчиків температури

