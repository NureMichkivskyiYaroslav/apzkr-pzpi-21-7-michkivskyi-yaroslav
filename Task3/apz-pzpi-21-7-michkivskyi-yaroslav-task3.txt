1 ОПИС АРХІТЕКТУРИ ПРОГРАМИ

Архітектура програми представляє собою 3-шарову архітектуру: представлення, обробка даних та доступ до даних.
1.	представлення. В системі представлена консоллю, у яку виводиться поточний стан системи та результат запитів на відправку даних на сервер;
2.	обробка даних. В системі представлено за допомогою сервісів обробки. GpsService займається обробкою даних GPS модуля, TemperatureDataService займається обробкою даних з датчиків;
3.	доступ до даних. В системі представлено за допомогою сервісу ApiService у якому знаходяться функції для відправки http запитів.

2 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Програма для IoT пристрою передбачає автоматичне функціонування, без втручання у систему під час роботи. Система автоматично збирає, оброблює та надсилає дані підключених датчиків на сервер де вони можуть бути переглянуті користувачами.
Взаємодію користувачів з системою представлено на діаграмі прецедентів (рис 2.1). За діаграмою було визначено необхідну функціональність програми та взаємодію ролей з нею.

3 ПОБУДОВА ДІАГРАМИ ДІЯЛЬНОСТІ

Для розробки подальших функцій програми було розроблено UML діаграму діяльності пристрою (рис 3.1). Автоматичний цикл роботи програмного коду повторюється до вимкнення пристрою.

4 ПОБУДОВА ДІАГРАМИ ВЗАЄМОДІЇ

Взаємодія компонентів програми представлено за допомогою UML діаграми взаємодії (рис 4.1). Взаємодія відбувається між користувачем, програмою та сервером.

5 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

Для проєктування внутрішньої взаємодії компонентів системи було розроблено діаграму компонентів (рис. 5.1). Система складається з таких компонентів: Сервіс запитів (ApiService), головного виконавчого файлу (Controller), Сервіси обробки (GPSService, TemperatureDataService). Зовнішніми компонентами є Сервер (Server), модуль GPS (GPS Module), датчики температури (Temperature Indicators) та водій(Driver-man) що вмикає систему на початку перевезення.

6 ВЗАЄМОДІЯ З ІНШИМИ КОМПОНЕНТАМИ СИСТЕМИ

Програма взаємодіє з іншими компонентами системи завдяки двом основним методам: HTTP запити та кабельне з’єднання. Кабельне з’єднання потрібно для зв’язку з датчиками  За допомогою HTTP запитів програма передає на сервер дані з датчиків. Запити виконуються системою за допомогою окремого сервісу ApiService.

ВИСНОВКИ

У ході виконання лабораторної роботи були покращені навички з проєктування вбудованих систем для програмної системи та розробки діаграм. Було розроблено діаграми прецедентів, діяльності, взаємодії та компонентів. В результаті дула розроблена програмна реалізація розумного пристрою програмної системи. При розробці продукту дотримувались вимоги до чистого коду та Code Convention мови програмування С#.
